package co.uk.kenkwok.tulipmania.network

import android.support.annotation.Nullable
import co.uk.kenkwok.tulipmania.models.AnxTicker
import co.uk.kenkwok.tulipmania.models.BitfinexTicker
import co.uk.kenkwok.tulipmania.models.BitstampTicker
import io.reactivex.Observable
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.schedulers.Schedulers
import java.util.concurrent.TimeUnit

/**
 * Created by kwokk on 17/04/2017.
 */

class NetworkServiceImpl(private val anxService: ANXApi,
                         private val bitstampService: BitstampAPI,
                         private val bitfinexService: BitfinexAPI) : NetworkService {
    /**
     * Gets the most recent ticker data every 15 seconds
     * @param currencyPair BTCUSD,BTCHKD,BTCEUR,BTCCAD,BTCAUD,BTCSGD,BTCJPY,BTCGBP,BTCNZD
     * @param apiKey API Key
     * @param restSign Rest sign generated by NetworkUtils class
     */
    override fun getAnxTickerData(apiKey: String, restSign: String, currencyPair: String, @Nullable extraCcyPairs: String): Observable<AnxTicker> {
        return Observable.interval(0, TICKER_INTERVAL, TimeUnit.SECONDS, Schedulers.io())
                .flatMap {
                    anxService
                            .getMarketTickerObservable(currencyPair, apiKey, restSign, extraCcyPairs)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                }
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
    }

    /**
     * Gets the most recent Bitstamp ticker data every 15 seconds
     * @param currencyPair btcusd, , btceur, eurusd, xrpusd, xrpeur, xrpbtc, ltcusd, ltceur, ltcbtc, ethusd, etheur, ethbtc
     */
    override fun getBitstampTickerData(currencyPair: String): Observable<BitstampTicker> {
        return Observable.interval(0, TICKER_INTERVAL, TimeUnit.SECONDS, Schedulers.io())
                .flatMap {
                    bitstampService
                            .getMarketTickerObservable(currencyPair)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                }
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
    }

    /**
     * Gets the most recent Bitfinex ticker data every 15 seconds
     * @param currencyPair btcusd
     */
    override fun getBitfinexTickerData(currencyPair: String): Observable<BitfinexTicker> {
        return Observable.interval(0, TICKER_INTERVAL, TimeUnit.SECONDS, Schedulers.io())
                .flatMap {
                    bitfinexService
                            .getMarketTickerObservable(currencyPair)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                }
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
    }

    companion object {
        private val TICKER_INTERVAL: Long = 15
    }
}
